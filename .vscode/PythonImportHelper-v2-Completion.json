[
    {
        "label": "gspread",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gspread",
        "description": "gspread",
        "detail": "gspread",
        "documentation": {}
    },
    {
        "label": "Credentials",
        "importPath": "google.oauth2.service_account",
        "description": "google.oauth2.service_account",
        "isExtraImport": true,
        "detail": "google.oauth2.service_account",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "get_sales_data",
        "kind": 2,
        "importPath": "run",
        "description": "run",
        "peekOfCode": "def get_sales_data():\n    \"\"\"\n    Get sales figures input from the user\n    Run a while loop to collect valid data from the user\n    via the terminal, which must be a string of 6 numbers separated by\n    commas. The loop will repeat itself until valid data is passed.\n    \"\"\"\n    while True:\n        print(\"Please enter sales data from the last market.\")\n        print(\"Data should be six numbers, separated by commas.\")",
        "detail": "run",
        "documentation": {}
    },
    {
        "label": "validate_data",
        "kind": 2,
        "importPath": "run",
        "description": "run",
        "peekOfCode": "def validate_data(values):\n    \"\"\" \n    Inside the try, converts all string values into integers.\n    Raises ValueError if strings cannot be converted into int,\n    or if there aren't exactly 6 values.\n    \"\"\"\n    try:\n        [int(value) for value in values] \n        if len(values) != 6:\n            raise ValueError(",
        "detail": "run",
        "documentation": {}
    },
    {
        "label": "update_sales_worksheet",
        "kind": 2,
        "importPath": "run",
        "description": "run",
        "peekOfCode": "def update_sales_worksheet(data):\n    \"\"\"\n    Update sales worksheet, add new row with the list data provided.\n    \"\"\"\n    print(\"Updating sales worksheet...\\n\")\n    sales_worksheet = SHEET.worksheet(\"sales\")\n    sales_worksheet.append_row(data)\n    print(\"Sales worksheet updated successfully.\\n\")\n#updates the surplus data\ndef update_surplus_worksheet(data):",
        "detail": "run",
        "documentation": {}
    },
    {
        "label": "update_surplus_worksheet",
        "kind": 2,
        "importPath": "run",
        "description": "run",
        "peekOfCode": "def update_surplus_worksheet(data):\n    \"\"\"\n    Update surplus worksheet, add new row with the list data provided.\n    \"\"\"\n    print(\"Updating surplus worksheet...\\n\")\n    surplus_worksheet = SHEET.worksheet(\"surplus\")\n    surplus_worksheet.append_row(data)\n    print(\"Surplus worksheet updated successfully.\\n\")\n#calculates the surplus data\ndef calculate_surplus_data(sales_row):",
        "detail": "run",
        "documentation": {}
    },
    {
        "label": "calculate_surplus_data",
        "kind": 2,
        "importPath": "run",
        "description": "run",
        "peekOfCode": "def calculate_surplus_data(sales_row):\n    \"\"\"\n    Compare sales with stock and calculate surplus for each item type.\n    The surplus is defined as the sales figure subtracted from the stock:\n    -Positive Surplus indicates waste.\n    -Negative surplus indicates extra made when stock was sold out.  \n    \"\"\"    \n    print(\"Calculating surplus data...\\n\")\n    stock = SHEET.worksheet(\"stock\").get_all_values()\n    stock_row = stock[-1]",
        "detail": "run",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "run",
        "description": "run",
        "peekOfCode": "def main():\n    \"\"\"\n    Run all program functions.\n    \"\"\"    \n    data =  get_sales_data()\n    sales_data = [int(num) for num in data]\n    update_sales_worksheet(sales_data)\n    new_surplus_data = calculate_surplus_data(sales_data)\n    update_surplus_worksheet(new_surplus_data)\nprint(\"Welcome to Love Sandwiches data automation\")",
        "detail": "run",
        "documentation": {}
    },
    {
        "label": "SCOPE",
        "kind": 5,
        "importPath": "run",
        "description": "run",
        "peekOfCode": "SCOPE = [\n    \"https://www.googleapis.com/auth/spreadsheets\",\n    \"https://www.googleapis.com/auth/drive.file\",\n    \"https://www.googleapis.com/auth/drive\"\n    ]\nCREDS = Credentials .from_service_account_file('creds.json')\nSCOPED_CREDS = CREDS.with_scopes(SCOPE)\nGSPREAD_CLIENT = gspread.authorize(SCOPED_CREDS)\nSHEET = GSPREAD_CLIENT.open('love_sandwiches')\ndef get_sales_data():",
        "detail": "run",
        "documentation": {}
    },
    {
        "label": "CREDS",
        "kind": 5,
        "importPath": "run",
        "description": "run",
        "peekOfCode": "CREDS = Credentials .from_service_account_file('creds.json')\nSCOPED_CREDS = CREDS.with_scopes(SCOPE)\nGSPREAD_CLIENT = gspread.authorize(SCOPED_CREDS)\nSHEET = GSPREAD_CLIENT.open('love_sandwiches')\ndef get_sales_data():\n    \"\"\"\n    Get sales figures input from the user\n    Run a while loop to collect valid data from the user\n    via the terminal, which must be a string of 6 numbers separated by\n    commas. The loop will repeat itself until valid data is passed.",
        "detail": "run",
        "documentation": {}
    },
    {
        "label": "SCOPED_CREDS",
        "kind": 5,
        "importPath": "run",
        "description": "run",
        "peekOfCode": "SCOPED_CREDS = CREDS.with_scopes(SCOPE)\nGSPREAD_CLIENT = gspread.authorize(SCOPED_CREDS)\nSHEET = GSPREAD_CLIENT.open('love_sandwiches')\ndef get_sales_data():\n    \"\"\"\n    Get sales figures input from the user\n    Run a while loop to collect valid data from the user\n    via the terminal, which must be a string of 6 numbers separated by\n    commas. The loop will repeat itself until valid data is passed.\n    \"\"\"",
        "detail": "run",
        "documentation": {}
    },
    {
        "label": "GSPREAD_CLIENT",
        "kind": 5,
        "importPath": "run",
        "description": "run",
        "peekOfCode": "GSPREAD_CLIENT = gspread.authorize(SCOPED_CREDS)\nSHEET = GSPREAD_CLIENT.open('love_sandwiches')\ndef get_sales_data():\n    \"\"\"\n    Get sales figures input from the user\n    Run a while loop to collect valid data from the user\n    via the terminal, which must be a string of 6 numbers separated by\n    commas. The loop will repeat itself until valid data is passed.\n    \"\"\"\n    while True:",
        "detail": "run",
        "documentation": {}
    },
    {
        "label": "SHEET",
        "kind": 5,
        "importPath": "run",
        "description": "run",
        "peekOfCode": "SHEET = GSPREAD_CLIENT.open('love_sandwiches')\ndef get_sales_data():\n    \"\"\"\n    Get sales figures input from the user\n    Run a while loop to collect valid data from the user\n    via the terminal, which must be a string of 6 numbers separated by\n    commas. The loop will repeat itself until valid data is passed.\n    \"\"\"\n    while True:\n        print(\"Please enter sales data from the last market.\")",
        "detail": "run",
        "documentation": {}
    }
]